<?php

namespace Modules\{{moduleNamePlural}}\Http\Controllers\Api;

use App\Http\Controllers\Api\BaseApiController;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Modules\{{moduleNamePlural}}\Http\Requests\{{moduleName}}CreateApiRequest;
use Modules\{{moduleNamePlural}}\Http\Requests\{{moduleName}}UpdateApiRequest;
use Modules\{{moduleNamePlural}}\Repositories\{{moduleName}}Repository;
use Modules\{{moduleNamePlural}}\Transformers\{{moduleName}}Transformer;


/**
 * Class {{moduleNamePlural}}Controller
 * @property {{moduleName}}Repository $repository
 * @package Modules\{{moduleNamePlural}}\Http\Controllers\Api
 */
class {{moduleNamePlural}}Controller extends BaseApiController
{
    /**
     * {{moduleNamePlural}}Controller constructor.
     * @param {{moduleName}}Repository $repository
     */
    public function __construct({{moduleName}}Repository $repository)
    {
        parent::__construct($repository);
    }

    public function index(Request $request)
    {
        $data = $this->repository->paginate(intval($request->get('per_page')));
        return $this->responseSuccess($this->transform($data, {{moduleName}}Transformer::class, $request));
    }

    public function show($identifier, Request $request)
    {
        $entity = $this->repository->find($identifier);
        return $this->responseSuccess($this->transform($entity, {{moduleName}}Transformer::class, $request));
    }

    public function store({{moduleName}}CreateApiRequest $request)
    {
        DB::beginTransaction();
        try {
            $storeValues = $request->only([]);
            $entity = $this->repository->create($storeValues);
            DB::commit();
            return $this->responseSuccess($this->transform($entity, {{moduleName}}Transformer::class, $request));
        } catch (\Exception $e) {
            Log::error($e);
            DB::rollBack();
            return $this->responseErrors(500, $e->getMessage());
        }
    }

    
    public function update($identifier, {{moduleName}}UpdateApiRequest $request)
    {
        $entity = $this->repository->find($identifier);
        $storeValues = $request->only([]);
        DB::beginTransaction();
        try {
            $entity = $this->repository->update($storeValues, $entity->id);
            DB::commit();
            return $this->responseSuccess($this->transform($entity, {{moduleName}}Transformer::class, $request));
        } catch (\Exception $e) {
            Log::error($e);
            DB::rollBack();
            return $this->responseErrors(500, $e->getMessage());
        }
    }
}
